#include <ESP8266WiFi.h>
#include <FirebaseESP8266.h>
#include <Adafruit_Fingerprint.h>
void loop() {
  int choice = displayMenuAndGetChoice();
  switch (choice) {
    case 1:
      addStudent();
      break;
    case 2:
      updateStudent();
      break;
    case 3:
      deleteStudent();
      break;
  }
}

int displayMenuAndGetChoice() {
  Serial.println("1. Add Student");
  Serial.println("2. Update Student");
  Serial.println("3. Delete Student");
  while (!Serial.available());
  return Serial.parseInt();
}

void addStudent() {
  Serial.println("Enter Student ID:");
  while (!Serial.available());
  int studentID = Serial.parseInt();
  if (isDuplicate(studentID)) {
    Serial.println("Duplicate ID");
    return;
  }

  int fingerID = enrollFingerprint();
  if (fingerID != -1) {
    
    addToGoogleSheet(studentID, fingerID);
  }
}

void updateStudent() {
  Serial.println("Enter Student ID to Update:");
  while (!Serial.available());
  int studentID = Serial.parseInt();
  if (!isStudentExist(studentID)) {
    Serial.println("Student ID not found");
    return;
  }

  int fingerID = enrollFingerprint();
  if (fingerID != -1) {
    // Update Google Sheet
    updateGoogleSheet(studentID, fingerID);
  }
}

void deleteStudent() {
  Serial.println("Enter Student ID to Delete:");
  while (!Serial.available());
  int studentID = Serial.parseInt();
  if (!isStudentExist(studentID)) {
    Serial.println("Student ID not found");
    return;
  }

  bool isDuplicate(int studentID) {
    HTTPClient http;
    String url = String(googleScriptURL) + "?action=isDuplicate&studentID=" + String(studentID);
    http.begin(client, url);
    int httpCode = http.GET();
    String payload = http.getString();
    http.end();
  
    return payload == "true";
  }
  
  bool isStudentExist(int studentID) {
    HTTPClient http;
    String url = String(googleScriptURL) + "?action=isStudentExist&studentID=" + String(studentID);
    http.begin(client, url);
    int httpCode = http.GET();
    String payload = http.getString();
    http.end();
  
    return payload == "true";
  }
  
  int enrollFingerprint() {
    int p = -1;
    Serial.println("Waiting for valid finger to enroll as ID...");
    while (p != FINGERPRINT_OK) {
      p = finger.getImage();
      switch (p) {
        case FINGERPRINT_OK:
          Serial.println("Image taken");
          break;
        case FINGERPRINT_NOFINGER:
          Serial.print(".");
          break;
        case FINGERPRINT_PACKETRECIEVEERR:
          Serial.println("Communication error");
          break;
        case FINGERPRINT_IMAGEFAIL:
          Serial.println("Imaging error");
          break;
        default:
          Serial.println("Unknown error");
          break;
      }
    }
  
    p = finger.image2Tz(1);
    switch (p) {
      case FINGERPRINT_OK:
        Serial.println("Image converted");
        break;
      case FINGERPRINT_IMAGEMESS:
        Serial.println("Image too messy");
        return -1;
      case FINGERPRINT_PACKETRECIEVEERR:
        Serial.println("Communication error");
        return -1;
      case FINGERPRINT_FEATUREFAIL:
        Serial.println("Could not find fingerprint features");
        return -1;
      case FINGERPRINT_INVALIDIMAGE:
        Serial.println("Could not find fingerprint features");
        return -1;
      default:
        Serial.println("Unknown error");
        return -1;
    }
  
    Serial.println("Remove finger and place the same finger again");
  
    delay(2000);
    p = 0;
    while (p != FINGERPRINT_NOFINGER) {
      p = finger.getImage();
    }
  
    Serial.println("Place the same finger again");
    p = -1;
    while (p != FINGERPRINT_OK) {
      p = finger.getImage();
      switch (p) {
        case FINGERPRINT_OK:
          Serial.println("Image taken");
          break;
        case FINGERPRINT_NOFINGER:
          Serial.print(".");
          break;
        case FINGERPRINT_PACKETRECIEVEERR:
          Serial.println("Communication error");
          break;
        case FINGERPRINT_IMAGEFAIL:
          Serial.println("Imaging error");
          break;
        default:
          Serial.println("Unknown error");
          break;
      }
    }
  
    p = finger.image2Tz(2);
    switch (p) {
      case FINGERPRINT_OK:
        Serial.println("Image converted");
        break;
      case FINGERPRINT_IMAGEMESS:
        Serial.println("Image too messy");
        return -1;
      case FINGERPRINT_PACKETRECIEVEERR:
        Serial.println("Communication error");
        return -1;
      case FINGERPRINT_FEATUREFAIL:
        Serial.println("Could not find fingerprint features");
        return -1;
      case FINGERPRINT_INVALIDIMAGE:
        Serial.println("Could not find fingerprint features");
        return -1;
      default:
        Serial.println("Unknown error");
        return -1;
    }
  
    p = finger.createModel();
    if (p == FINGERPRINT_OK) {
      Serial.println("Prints matched!");
    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
      Serial.println("Communication error");
      return -1;
    } else if (p == FINGERPRINT_ENROLLMISMATCH) {
      Serial.println("Fingerprints did not match");
      return -1;
    } else {
      Serial.println("Unknown error");
      return -1;
    }
  
    Serial.println("ID is ready to use");
  
    return finger.fingerID;
  }
  

void addToGoogleSheet(int studentID, int fingerID) {
    HTTPClient http;
    String url = "https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec?action=add&studentID=" + String(studentID) + "&fingerID=" + String(fingerID);
    http.begin(client, url);
    int httpCode = http.GET();
    http.end();
  }
  
  void updateGoogleSheet(int studentID, int fingerID) {
    HTTPClient http;
    String url = "https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec?action=update&studentID=" + String(studentID) + "&fingerID=" + String(fingerID);
    http.begin(client, url);
    int httpCode = http.GET();
    http.end();
  }
  
  void deleteFromGoogleSheet(int studentID) {
    HTTPClient http;
    String url = "https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec?action=delete&studentID=" + String(studentID);
    http.begin(client, url);
    int httpCode = http.GET();
    http.end();
  }
  
